{"version":3,"mappings":"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","names":["customBlocks","addToBlockFactory","module","blockName","factory","blockFactory","__vitePreload","FlowGraphPlayAnimationBlock","n","FlowGraphStopAnimationBlock","FlowGraphPauseAnimationBlock","FlowGraphInterpolationBlock","FlowGraphSceneReadyEventBlock","FlowGraphSceneTickEventBlock","FlowGraphSendCustomEventBlock","FlowGraphReceiveCustomEventBlock","FlowGraphMeshPickEventBlock","FlowGraphEBlock","FlowGraphPiBlock","FlowGraphInfBlock","FlowGraphNaNBlock","FlowGraphRandomBlock","FlowGraphAddBlock","FlowGraphSubtractBlock","FlowGraphMultiplyBlock","FlowGraphDivideBlock","FlowGraphAbsBlock","FlowGraphSignBlock","FlowGraphTruncBlock","FlowGraphFloorBlock","FlowGraphCeilBlock","FlowGraphRoundBlock","FlowGraphFractionBlock","FlowGraphNegationBlock","FlowGraphModuloBlock","FlowGraphMinBlock","FlowGraphMaxBlock","FlowGraphClampBlock","FlowGraphSaturateBlock","FlowGraphMathInterpolationBlock","FlowGraphEqualityBlock","FlowGraphLessThanBlock","FlowGraphLessThanOrEqualBlock","FlowGraphGreaterThanBlock","FlowGraphGreaterThanOrEqualBlock","FlowGraphIsNanBlock","FlowGraphIsInfinityBlock","FlowGraphDegToRadBlock","FlowGraphRadToDegBlock","FlowGraphSinBlock","FlowGraphCosBlock","FlowGraphTanBlock","FlowGraphAsinBlock","FlowGraphAcosBlock","FlowGraphAtanBlock","FlowGraphAtan2Block","FlowGraphSinhBlock","FlowGraphCoshBlock","FlowGraphTanhBlock","FlowGraphAsinhBlock","FlowGraphAcoshBlock","FlowGraphAtanhBlock","FlowGraphExpBlock","FlowGraphLogBlock","FlowGraphLog2Block","FlowGraphLog10Block","FlowGraphSquareRootBlock","FlowGraphPowerBlock","FlowGraphCubeRootBlock","FlowGraphBitwiseAndBlock","FlowGraphBitwiseOrBlock","FlowGraphBitwiseNotBlock","FlowGraphBitwiseXorBlock","FlowGraphBitwiseLeftShiftBlock","FlowGraphBitwiseRightShiftBlock","FlowGraphLengthBlock","FlowGraphNormalizeBlock","FlowGraphDotBlock","FlowGraphCrossBlock","FlowGraphRotate2DBlock","FlowGraphRotate3DBlock","FlowGraphTransposeBlock","FlowGraphDeterminantBlock","FlowGraphInvertMatrixBlock","FlowGraphMatrixMultiplicationBlock","FlowGraphBranchBlock","FlowGraphSetDelayBlock","FlowGraphCancelDelayBlock","FlowGraphCallCounterBlock","FlowGraphDebounceBlock","FlowGraphThrottleBlock","FlowGraphDoNBlock","FlowGraphFlipFlopBlock","FlowGraphForLoopBlock","FlowGraphMultiGateBlock","FlowGraphSequenceBlock","FlowGraphSwitchBlock","FlowGraphWaitAllBlock","FlowGraphWhileLoopBlock","FlowGraphConsoleLogBlock","FlowGraphConditionalDataBlock","FlowGraphConstantBlock","FlowGraphTransformCoordinatesSystemBlock","FlowGraphGetAssetBlock","FlowGraphGetPropertyBlock","FlowGraphSetPropertyBlock","FlowGraphGetVariableBlock","FlowGraphSetVariableBlock","FlowGraphJsonPointerParserBlock","FlowGraphLeadingZerosBlock","FlowGraphTrailingZerosBlock","FlowGraphOneBitsCounterBlock","FlowGraphCombineVector2Block","FlowGraphCombineVector3Block","FlowGraphCombineVector4Block","FlowGraphCombineMatrixBlock","FlowGraphExtractVector2Block","FlowGraphExtractVector3Block","FlowGraphExtractVector4Block","FlowGraphExtractMatrixBlock","FlowGraphTransformBlock","FlowGraphTransformCoordinatesBlock","FlowGraphMatrixDecomposeBlock","FlowGraphMatrixComposeBlock","FlowGraphBooleanToFloat","FlowGraphBooleanToInt","FlowGraphFloatToBoolean","FlowGraphIntToBoolean","FlowGraphIntToFloat","FlowGraphFloatToInt","FlowGraphEasingBlock","FlowGraphBezierCurveEasingBlock","FlowGraphPointerOverEventBlock","FlowGraphPointerOutEventBlock","FlowGraphContextBlock","FlowGraphArrayIndexBlock","FlowGraphCodeExecutionBlock","FlowGraphIndexOfBlock","FlowGraphFunctionReferenceBlock","FlowGraphDataSwitchBlock","GetDataOutConnectionByUniqueId","blocks","uniqueId","block","dataOut","GetSignalInConnectionByUniqueId","FlowGraphExecutionBlock","signalIn","ParseFlowGraphAsync","serializationObject","options","resolvedClasses","serializedBlock","ParseFlowGraph","graph","valueParseFunction","defaultValueParseFunction","i","ParseFlowGraphBlockWithClassType","FlowGraphEventBlock","dataIn","serializedConnection","connection","signalOut","serializedContext","ParseFlowGraphContext","rightHanded","result","scene","ac","assetsContext","_a","m","_b","l","_c","c","_d","_e","t","_f","a","anim","_g","s","_h","ps","_i","ag","_j","tn","key","value","parseOptions","classType","parsedConfig","needsPathConverter","obj","dataInput","dataOutput","gltfTypeToBabylonType","InteractivityGraphToFlowGraphParser","_interactivityGraph","_gltf","_loader","type","declaration","mapping","getMappingForDeclaration","Logger","variable","parsed","dataTransform","event","converted","eventValue","node","blockType","className","RandomGUID","nodeMapping","configuration","configMapping","configKey","context","gltfNode","flowGraphBlocks","outputMapper","flowsFromGLTF","flowsKeys","flowKey","flow","flowMapping","socketOutName","socketOut","b","inputNodeId","nodeIn","inputMapper","getMappingForFullOperationName","flowInMapping","arrayMapping","nodeInSocketName","inputBlock","socketIn","valuesFromGLTF","valuesKeys","valueKey","valueMapping","_k","_m","_l","socketInName","convertedValue","nodeOutId","nodeOutSocketName","nodeOut","_o","_n","_p","_r","_q","outBlock","connector","input","output","isVariable","_s","name","isOutput","serializedInput","serializedOutput","inputArray","outputArray","inputConnection","outputConnection","index","acc","val","NAME","KHR_interactivity","GetPathToObjectConverter","_AddInteractivityObjectModel","interactivityDefinition","coordinator","FlowGraphCoordinator","graphs","AddObjectAccessorToKey","Quaternion","Vector3","animation","FlowGraphGLTFDataProvider","unregisterGLTFExtension","registerGLTFExtension","loader"],"ignoreList":[0,1,2,3],"sources":["../../node_modules/@babylonjs/core/FlowGraph/Blocks/flowGraphBlockFactory.js","../../node_modules/@babylonjs/core/FlowGraph/flowGraphParser.js","../../node_modules/@babylonjs/loaders/glTF/2.0/Extensions/KHR_interactivity/interactivityGraphParser.js","../../node_modules/@babylonjs/loaders/glTF/2.0/Extensions/KHR_interactivity.js"],"sourcesContent":["/**\n * Any external module that wishes to add a new block to the flow graph can add to this object using the helper function.\n */\nconst customBlocks = {};\n/**\n * If you want to add a new block to the block factory, you should use this function.\n * Please be sure to choose a unique name and define the responsible module.\n * @param module the name of the module that is responsible for the block\n * @param blockName the name of the block. This should be unique.\n * @param factory an async factory function to generate the block\n */\nexport function addToBlockFactory(module, blockName, factory) {\n    customBlocks[`${module}/${blockName}`] = factory;\n}\n/**\n * a function to get a factory function for a block.\n * @param blockName the block name to initialize. If the block comes from an external module, the name should be in the format \"module/blockName\"\n * @returns an async factory function that will return the block class when called.\n */\nexport function blockFactory(blockName) {\n    switch (blockName) {\n        case \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphPlayAnimationBlock.js\")).FlowGraphPlayAnimationBlock;\n        case \"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphStopAnimationBlock.js\")).FlowGraphStopAnimationBlock;\n        case \"FlowGraphPauseAnimationBlock\" /* FlowGraphBlockNames.PauseAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphPauseAnimationBlock.js\")).FlowGraphPauseAnimationBlock;\n        case \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphInterpolationBlock.js\")).FlowGraphInterpolationBlock;\n        case \"FlowGraphSceneReadyEventBlock\" /* FlowGraphBlockNames.SceneReadyEvent */:\n            return async () => (await import(\"./Event/flowGraphSceneReadyEventBlock.js\")).FlowGraphSceneReadyEventBlock;\n        case \"FlowGraphSceneTickEventBlock\" /* FlowGraphBlockNames.SceneTickEvent */:\n            return async () => (await import(\"./Event/flowGraphSceneTickEventBlock.js\")).FlowGraphSceneTickEventBlock;\n        case \"FlowGraphSendCustomEventBlock\" /* FlowGraphBlockNames.SendCustomEvent */:\n            return async () => (await import(\"./Event/flowGraphSendCustomEventBlock.js\")).FlowGraphSendCustomEventBlock;\n        case \"FlowGraphReceiveCustomEventBlock\" /* FlowGraphBlockNames.ReceiveCustomEvent */:\n            return async () => (await import(\"./Event/flowGraphReceiveCustomEventBlock.js\")).FlowGraphReceiveCustomEventBlock;\n        case \"FlowGraphMeshPickEventBlock\" /* FlowGraphBlockNames.MeshPickEvent */:\n            return async () => (await import(\"./Event/flowGraphMeshPickEventBlock.js\")).FlowGraphMeshPickEventBlock;\n        case \"FlowGraphEBlock\" /* FlowGraphBlockNames.E */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphEBlock;\n        case \"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphPiBlock;\n        case \"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphInfBlock;\n        case \"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphNaNBlock;\n        case \"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphRandomBlock;\n        case \"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAddBlock;\n        case \"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSubtractBlock;\n        case \"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphMultiplyBlock;\n        case \"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphDivideBlock;\n        case \"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAbsBlock;\n        case \"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSignBlock;\n        case \"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphTruncBlock;\n        case \"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphFloorBlock;\n        case \"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphCeilBlock;\n        case \"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphRoundBlock;\n        case \"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphFractionBlock;\n        case \"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphNegationBlock;\n        case \"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphModuloBlock;\n        case \"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphMinBlock;\n        case \"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphMaxBlock;\n        case \"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphClampBlock;\n        case \"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSaturateBlock;\n        case \"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphMathInterpolationBlock;\n        case \"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphEqualityBlock;\n        case \"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLessThanBlock;\n        case \"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLessThanOrEqualBlock;\n        case \"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphGreaterThanBlock;\n        case \"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphGreaterThanOrEqualBlock;\n        case \"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphIsNanBlock;\n        case \"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphIsInfinityBlock;\n        case \"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphDegToRadBlock;\n        case \"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphRadToDegBlock;\n        case \"FlowGraphSinBlock\" /* FlowGraphBlockNames.Sin */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSinBlock;\n        case \"FlowGraphCosBlock\" /* FlowGraphBlockNames.Cos */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphCosBlock;\n        case \"FlowGraphTanBlock\" /* FlowGraphBlockNames.Tan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphTanBlock;\n        case \"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAsinBlock;\n        case \"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAcosBlock;\n        case \"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAtanBlock;\n        case \"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAtan2Block;\n        case \"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSinhBlock;\n        case \"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphCoshBlock;\n        case \"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphTanhBlock;\n        case \"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAsinhBlock;\n        case \"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAcoshBlock;\n        case \"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAtanhBlock;\n        case \"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphExpBlock;\n        case \"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLogBlock;\n        case \"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLog2Block;\n        case \"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLog10Block;\n        case \"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSquareRootBlock;\n        case \"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphPowerBlock;\n        case \"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphCubeRootBlock;\n        case \"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseAndBlock;\n        case \"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseOrBlock;\n        case \"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseNotBlock;\n        case \"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseXorBlock;\n        case \"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseLeftShiftBlock;\n        case \"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseRightShiftBlock;\n        case \"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphLengthBlock;\n        case \"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphNormalizeBlock;\n        case \"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphDotBlock;\n        case \"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphCrossBlock;\n        case \"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphRotate2DBlock;\n        case \"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphRotate3DBlock;\n        case \"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphTransposeBlock;\n        case \"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphDeterminantBlock;\n        case \"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphInvertMatrixBlock;\n        case \"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphMatrixMultiplicationBlock;\n        case \"FlowGraphBranchBlock\" /* FlowGraphBlockNames.Branch */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphBranchBlock.js\")).FlowGraphBranchBlock;\n        case \"FlowGraphSetDelayBlock\" /* FlowGraphBlockNames.SetDelay */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSetDelayBlock.js\")).FlowGraphSetDelayBlock;\n        case \"FlowGraphCancelDelayBlock\" /* FlowGraphBlockNames.CancelDelay */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphCancelDelayBlock.js\")).FlowGraphCancelDelayBlock;\n        case \"FlowGraphCallCounterBlock\" /* FlowGraphBlockNames.CallCounter */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphCounterBlock.js\")).FlowGraphCallCounterBlock;\n        case \"FlowGraphDebounceBlock\" /* FlowGraphBlockNames.Debounce */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphDebounceBlock.js\")).FlowGraphDebounceBlock;\n        case \"FlowGraphThrottleBlock\" /* FlowGraphBlockNames.Throttle */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphThrottleBlock.js\")).FlowGraphThrottleBlock;\n        case \"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphDoNBlock.js\")).FlowGraphDoNBlock;\n        case \"FlowGraphFlipFlopBlock\" /* FlowGraphBlockNames.FlipFlop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphFlipFlopBlock.js\")).FlowGraphFlipFlopBlock;\n        case \"FlowGraphForLoopBlock\" /* FlowGraphBlockNames.ForLoop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphForLoopBlock.js\")).FlowGraphForLoopBlock;\n        case \"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphMultiGateBlock.js\")).FlowGraphMultiGateBlock;\n        case \"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSequenceBlock.js\")).FlowGraphSequenceBlock;\n        case \"FlowGraphSwitchBlock\" /* FlowGraphBlockNames.Switch */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSwitchBlock.js\")).FlowGraphSwitchBlock;\n        case \"FlowGraphWaitAllBlock\" /* FlowGraphBlockNames.WaitAll */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphWaitAllBlock.js\")).FlowGraphWaitAllBlock;\n        case \"FlowGraphWhileLoopBlock\" /* FlowGraphBlockNames.WhileLoop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphWhileLoopBlock.js\")).FlowGraphWhileLoopBlock;\n        case \"FlowGraphConsoleLogBlock\" /* FlowGraphBlockNames.ConsoleLog */:\n            return async () => (await import(\"./Execution/flowGraphConsoleLogBlock.js\")).FlowGraphConsoleLogBlock;\n        case \"FlowGraphConditionalBlock\" /* FlowGraphBlockNames.Conditional */:\n            return async () => (await import(\"./Data/flowGraphConditionalDataBlock.js\")).FlowGraphConditionalDataBlock;\n        case \"FlowGraphConstantBlock\" /* FlowGraphBlockNames.Constant */:\n            return async () => (await import(\"./Data/flowGraphConstantBlock.js\")).FlowGraphConstantBlock;\n        case \"FlowGraphTransformCoordinatesSystemBlock\" /* FlowGraphBlockNames.TransformCoordinatesSystem */:\n            return async () => (await import(\"./Data/flowGraphTransformCoordinatesSystemBlock.js\")).FlowGraphTransformCoordinatesSystemBlock;\n        case \"FlowGraphGetAssetBlock\" /* FlowGraphBlockNames.GetAsset */:\n            return async () => (await import(\"./Data/flowGraphGetAssetBlock.js\")).FlowGraphGetAssetBlock;\n        case \"FlowGraphGetPropertyBlock\" /* FlowGraphBlockNames.GetProperty */:\n            return async () => (await import(\"./Data/flowGraphGetPropertyBlock.js\")).FlowGraphGetPropertyBlock;\n        case \"FlowGraphSetPropertyBlock\" /* FlowGraphBlockNames.SetProperty */:\n            return async () => (await import(\"./Execution/flowGraphSetPropertyBlock.js\")).FlowGraphSetPropertyBlock;\n        case \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */:\n            return async () => (await import(\"./Data/flowGraphGetVariableBlock.js\")).FlowGraphGetVariableBlock;\n        case \"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */:\n            return async () => (await import(\"./Execution/flowGraphSetVariableBlock.js\")).FlowGraphSetVariableBlock;\n        case \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */:\n            return async () => (await import(\"./Data/Transformers/flowGraphJsonPointerParserBlock.js\")).FlowGraphJsonPointerParserBlock;\n        case \"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLeadingZerosBlock;\n        case \"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphTrailingZerosBlock;\n        case \"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphOneBitsCounterBlock;\n        case \"FlowGraphCombineVector2Block\" /* FlowGraphBlockNames.CombineVector2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphCombineVector2Block;\n        case \"FlowGraphCombineVector3Block\" /* FlowGraphBlockNames.CombineVector3 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphCombineVector3Block;\n        case \"FlowGraphCombineVector4Block\" /* FlowGraphBlockNames.CombineVector4 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphCombineVector4Block;\n        case \"FlowGraphCombineMatrixBlock\" /* FlowGraphBlockNames.CombineMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphCombineMatrixBlock;\n        case \"FlowGraphExtractVector2Block\" /* FlowGraphBlockNames.ExtractVector2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphExtractVector2Block;\n        case \"FlowGraphExtractVector3Block\" /* FlowGraphBlockNames.ExtractVector3 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphExtractVector3Block;\n        case \"FlowGraphExtractVector4Block\" /* FlowGraphBlockNames.ExtractVector4 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphExtractVector4Block;\n        case \"FlowGraphExtractMatrixBlock\" /* FlowGraphBlockNames.ExtractMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphExtractMatrixBlock;\n        case \"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphTransformBlock;\n        case \"FlowGraphTransformCoordinatesBlock\" /* FlowGraphBlockNames.TransformCoordinates */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphTransformCoordinatesBlock;\n        case \"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphMatrixDecomposeBlock;\n        case \"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphMatrixComposeBlock;\n        case \"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphBooleanToFloat;\n        case \"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphBooleanToInt;\n        case \"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphFloatToBoolean;\n        case \"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphIntToBoolean;\n        case \"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphIntToFloat;\n        case \"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphFloatToInt;\n        case \"FlowGraphEasingBlock\" /* FlowGraphBlockNames.Easing */:\n            return async () => (await import(\"./Execution/Animation/flowGraphEasingBlock.js\")).FlowGraphEasingBlock;\n        case \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */:\n            return async () => (await import(\"./Execution/Animation/flowGraphBezierCurveEasingBlock.js\")).FlowGraphBezierCurveEasingBlock;\n        case \"FlowGraphPointerOverEventBlock\" /* FlowGraphBlockNames.PointerOverEvent */:\n            return async () => (await import(\"./Event/flowGraphPointerOverEventBlock.js\")).FlowGraphPointerOverEventBlock;\n        case \"FlowGraphPointerOutEventBlock\" /* FlowGraphBlockNames.PointerOutEvent */:\n            return async () => (await import(\"./Event/flowGraphPointerOutEventBlock.js\")).FlowGraphPointerOutEventBlock;\n        case \"FlowGraphContextBlock\" /* FlowGraphBlockNames.Context */:\n            return async () => (await import(\"./Data/Utils/flowGraphContextBlock.js\")).FlowGraphContextBlock;\n        case \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */:\n            return async () => (await import(\"./Data/Utils/flowGraphArrayIndexBlock.js\")).FlowGraphArrayIndexBlock;\n        case \"FlowGraphCodeExecutionBlock\" /* FlowGraphBlockNames.CodeExecution */:\n            return async () => (await import(\"./Data/Utils/flowGraphCodeExecutionBlock.js\")).FlowGraphCodeExecutionBlock;\n        case \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */:\n            return async () => (await import(\"./Data/Utils/flowGraphIndexOfBlock.js\")).FlowGraphIndexOfBlock;\n        case \"FlowGraphFunctionReference\" /* FlowGraphBlockNames.FunctionReference */:\n            return async () => (await import(\"./Data/Utils/flowGraphFunctionReferenceBlock.js\")).FlowGraphFunctionReferenceBlock;\n        case \"FlowGraphDataSwitchBlock\" /* FlowGraphBlockNames.DataSwitch */:\n            return async () => (await import(\"./Data/flowGraphDataSwitchBlock.js\")).FlowGraphDataSwitchBlock;\n        default:\n            // check if the block is a custom block\n            if (customBlocks[blockName]) {\n                return customBlocks[blockName];\n            }\n            throw new Error(`Unknown block name ${blockName}`);\n    }\n}\n//# sourceMappingURL=flowGraphBlockFactory.js.map","import { blockFactory } from \"./Blocks/flowGraphBlockFactory.js\";\nimport { FlowGraphCoordinator } from \"./flowGraphCoordinator.js\";\nimport { FlowGraphEventBlock } from \"./flowGraphEventBlock.js\";\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock.js\";\nimport { defaultValueParseFunction, needsPathConverter } from \"./serialization.js\";\nimport { getRichTypeByFlowGraphType, RichType } from \"./flowGraphRichTypes.js\";\n/**\n * Given a list of blocks, find an output data connection that has a specific unique id\n * @param blocks a list of flow graph blocks\n * @param uniqueId the unique id of a connection\n * @returns the connection that has this unique id. throws an error if none was found\n */\nexport function GetDataOutConnectionByUniqueId(blocks, uniqueId) {\n    for (const block of blocks) {\n        for (const dataOut of block.dataOutputs) {\n            if (dataOut.uniqueId === uniqueId) {\n                return dataOut;\n            }\n        }\n    }\n    throw new Error(\"Could not find data out connection with unique id \" + uniqueId);\n}\n/**\n * Given a list of blocks, find an input signal connection that has a specific unique id\n * @param blocks a list of flow graph blocks\n * @param uniqueId the unique id of a connection\n * @returns the connection that has this unique id. throws an error if none was found\n */\nexport function GetSignalInConnectionByUniqueId(blocks, uniqueId) {\n    for (const block of blocks) {\n        if (block instanceof FlowGraphExecutionBlock) {\n            for (const signalIn of block.signalInputs) {\n                if (signalIn.uniqueId === uniqueId) {\n                    return signalIn;\n                }\n            }\n        }\n    }\n    throw new Error(\"Could not find signal in connection with unique id \" + uniqueId);\n}\n/**\n * Parses a serialized coordinator.\n * @param serializedObject the object to parse\n * @param options the options to use when parsing\n * @returns the parsed coordinator\n */\nexport async function ParseCoordinatorAsync(serializedObject, options) {\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    const coordinator = new FlowGraphCoordinator({ scene: options.scene });\n    if (serializedObject.dispatchEventsSynchronously) {\n        coordinator.dispatchEventsSynchronously = serializedObject.dispatchEventsSynchronously;\n    }\n    await options.scene.whenReadyAsync();\n    // if custom default values are defined, set them in the global context\n    if (serializedObject._defaultValues) {\n        for (const key in serializedObject._defaultValues) {\n            // key is the FlowGraphType, value is the default value\n            const value = serializedObject._defaultValues[key];\n            getRichTypeByFlowGraphType(key).defaultValue = value;\n        }\n    }\n    // async-parse the flow graphs. This can be done in parallel\n    await Promise.all(serializedObject._flowGraphs?.map((serializedGraph) => ParseFlowGraphAsync(serializedGraph, { coordinator, valueParseFunction, pathConverter: options.pathConverter })));\n    return coordinator;\n}\n/**\n * Parses a graph from a given serialization object\n * @param serializationObject the object where the values are written\n * @param options options for parsing the graph\n * @returns the parsed graph\n */\nexport async function ParseFlowGraphAsync(serializationObject, options) {\n    // get all classes types needed for the blocks using the block factory\n    const resolvedClasses = await Promise.all(serializationObject.allBlocks.map(async (serializedBlock) => {\n        const classFactory = blockFactory(serializedBlock.className);\n        return classFactory();\n    }));\n    // async will be used when we start using the block async factory\n    return ParseFlowGraph(serializationObject, options, resolvedClasses);\n}\n/**\n * Parses a graph from a given serialization object\n * @param serializationObject the object where the values are written\n * @param options options for parsing the graph\n * @param resolvedClasses the resolved classes for the blocks\n * @returns the parsed graph\n */\nexport function ParseFlowGraph(serializationObject, options, resolvedClasses) {\n    const graph = options.coordinator.createGraph();\n    const blocks = [];\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    // Parse all blocks\n    // for (const serializedBlock of serializationObject.allBlocks) {\n    for (let i = 0; i < serializationObject.allBlocks.length; i++) {\n        const serializedBlock = serializationObject.allBlocks[i];\n        const block = ParseFlowGraphBlockWithClassType(serializedBlock, { scene: options.coordinator.config.scene, pathConverter: options.pathConverter, assetsContainer: options.coordinator.config.scene, valueParseFunction }, resolvedClasses[i]);\n        blocks.push(block);\n        if (block instanceof FlowGraphEventBlock) {\n            graph.addEventBlock(block);\n        }\n    }\n    // After parsing all blocks, connect them\n    for (const block of blocks) {\n        for (const dataIn of block.dataInputs) {\n            for (const serializedConnection of dataIn.connectedPointIds) {\n                const connection = GetDataOutConnectionByUniqueId(blocks, serializedConnection);\n                dataIn.connectTo(connection);\n            }\n        }\n        if (block instanceof FlowGraphExecutionBlock) {\n            for (const signalOut of block.signalOutputs) {\n                for (const serializedConnection of signalOut.connectedPointIds) {\n                    const connection = GetSignalInConnectionByUniqueId(blocks, serializedConnection);\n                    signalOut.connectTo(connection);\n                }\n            }\n        }\n    }\n    for (const serializedContext of serializationObject.executionContexts) {\n        ParseFlowGraphContext(serializedContext, { graph, valueParseFunction }, serializationObject.rightHanded);\n    }\n    return graph;\n}\n/**\n * Parses a context\n * @param serializationObject the object containing the context serialization values\n * @param options the options for parsing the context\n * @param rightHanded whether the serialized data is right handed\n * @returns\n */\nexport function ParseFlowGraphContext(serializationObject, options, rightHanded) {\n    const result = options.graph.createContext();\n    if (serializationObject.enableLogging) {\n        result.enableLogging = true;\n    }\n    result.treatDataAsRightHanded = rightHanded || false;\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    result.uniqueId = serializationObject.uniqueId;\n    const scene = result.getScene();\n    // check if assets context is available\n    if (serializationObject._assetsContext) {\n        const ac = serializationObject._assetsContext;\n        const assetsContext = {\n            meshes: ac.meshes?.map((m) => scene.getMeshById(m)),\n            lights: ac.lights?.map((l) => scene.getLightByName(l)),\n            cameras: ac.cameras?.map((c) => scene.getCameraByName(c)),\n            materials: ac.materials?.map((m) => scene.getMaterialById(m)),\n            textures: ac.textures?.map((t) => scene.getTextureByName(t)),\n            animations: ac.animations?.map((a) => scene.animations.find((anim) => anim.name === a)),\n            skeletons: ac.skeletons?.map((s) => scene.getSkeletonByName(s)),\n            particleSystems: ac.particleSystems?.map((ps) => scene.getParticleSystemById(ps)),\n            animationGroups: ac.animationGroups?.map((ag) => scene.getAnimationGroupByName(ag)),\n            transformNodes: ac.transformNodes?.map((tn) => scene.getTransformNodeById(tn)),\n            rootNodes: [],\n            multiMaterials: [],\n            morphTargetManagers: [],\n            geometries: [],\n            actionManagers: [],\n            environmentTexture: null,\n            postProcesses: [],\n            sounds: null,\n            effectLayers: [],\n            layers: [],\n            reflectionProbes: [],\n            lensFlareSystems: [],\n            proceduralTextures: [],\n            getNodes: function () {\n                throw new Error(\"Function not implemented.\");\n            },\n        };\n        result.assetsContext = assetsContext;\n    }\n    for (const key in serializationObject._userVariables) {\n        const value = valueParseFunction(key, serializationObject._userVariables, result.assetsContext, scene);\n        result.userVariables[key] = value;\n    }\n    for (const key in serializationObject._connectionValues) {\n        const value = valueParseFunction(key, serializationObject._connectionValues, result.assetsContext, scene);\n        result._setConnectionValueByKey(key, value);\n    }\n    return result;\n}\n/**\n * Parses a block from a serialization object\n * This function is async due to the factory method that is used to create the block's class. If you load the class externally use ParseBlockWithClassType\n * @param serializationObject the object to parse from\n * @param parseOptions options for parsing the block\n * @returns the parsed block\n */\nexport async function ParseBlockAsync(serializationObject, parseOptions) {\n    const classFactory = blockFactory(serializationObject.className);\n    const classType = await classFactory();\n    return ParseFlowGraphBlockWithClassType(serializationObject, parseOptions, classType);\n}\n/**\n * Parses a block from a serialization object\n * @param serializationObject the object to parse from\n * @param parseOptions options for parsing the block\n * @param classType the class type of the block. This is used when the class is not loaded asynchronously\n * @returns the parsed block\n */\nexport function ParseFlowGraphBlockWithClassType(serializationObject, parseOptions, classType) {\n    const parsedConfig = {};\n    const valueParseFunction = parseOptions.valueParseFunction ?? defaultValueParseFunction;\n    if (serializationObject.config) {\n        for (const key in serializationObject.config) {\n            parsedConfig[key] = valueParseFunction(key, serializationObject.config, parseOptions.assetsContainer || parseOptions.scene, parseOptions.scene);\n        }\n    }\n    if (needsPathConverter(serializationObject.className)) {\n        if (!parseOptions.pathConverter) {\n            throw new Error(\"Path converter is required for this block\");\n        }\n        parsedConfig.pathConverter = parseOptions.pathConverter;\n    }\n    const obj = new classType(parsedConfig);\n    obj.uniqueId = serializationObject.uniqueId;\n    for (let i = 0; i < serializationObject.dataInputs.length; i++) {\n        const dataInput = obj.getDataInput(serializationObject.dataInputs[i].name);\n        if (dataInput) {\n            dataInput.deserialize(serializationObject.dataInputs[i]);\n        }\n        else {\n            throw new Error(\"Could not find data input with name \" + serializationObject.dataInputs[i].name + \" in block \" + serializationObject.className);\n        }\n    }\n    for (let i = 0; i < serializationObject.dataOutputs.length; i++) {\n        const dataOutput = obj.getDataOutput(serializationObject.dataOutputs[i].name);\n        if (dataOutput) {\n            dataOutput.deserialize(serializationObject.dataOutputs[i]);\n        }\n        else {\n            throw new Error(\"Could not find data output with name \" + serializationObject.dataOutputs[i].name + \" in block \" + serializationObject.className);\n        }\n    }\n    obj.metadata = serializationObject.metadata;\n    obj.deserialize && obj.deserialize(serializationObject);\n    return obj;\n}\n/**\n * Parses a connection from an object\n * @param serializationObject the object to parse from.\n * @param ownerBlock the block that owns the connection.\n * @param classType the class type of the connection.\n * @returns the parsed connection.\n */\nexport function ParseGraphConnectionWithClassType(serializationObject = {}, ownerBlock, classType) {\n    const connection = new classType(serializationObject.name, serializationObject._connectionType, ownerBlock);\n    connection.deserialize(serializationObject);\n    return connection;\n}\n/**\n * Parses a data connection from a serialized object.\n * @param serializationObject the object to parse from\n * @param ownerBlock the block that owns the connection\n * @param classType the class type of the data connection\n * @returns the parsed connection\n */\nexport function ParseGraphDataConnection(serializationObject, ownerBlock, classType) {\n    const richType = ParseRichType(serializationObject.richType);\n    const defaultValue = serializationObject.defaultValue;\n    const connection = new classType(serializationObject.name, serializationObject._connectionType, ownerBlock, richType, defaultValue, !!serializationObject._optional);\n    connection.deserialize(serializationObject);\n    return connection;\n}\n/**\n * Parses a rich type from a serialization object.\n * @param serializationObject a serialization object\n * @returns the parsed rich type\n */\nfunction ParseRichType(serializationObject) {\n    return new RichType(serializationObject.typeName, serializationObject.defaultValue);\n}\n//# sourceMappingURL=flowGraphParser.js.map","import { getMappingForDeclaration, getMappingForFullOperationName } from \"./declarationMapper.js\";\nimport { Logger } from \"@babylonjs/core/Misc/logger.js\";\nimport { RandomGUID } from \"@babylonjs/core/Misc/guid.js\";\nexport const gltfTypeToBabylonType = {\n    float: { length: 1, flowGraphType: \"number\" /* FlowGraphTypes.Number */, elementType: \"number\" },\n    bool: { length: 1, flowGraphType: \"boolean\" /* FlowGraphTypes.Boolean */, elementType: \"boolean\" },\n    float2: { length: 2, flowGraphType: \"Vector2\" /* FlowGraphTypes.Vector2 */, elementType: \"number\" },\n    float3: { length: 3, flowGraphType: \"Vector3\" /* FlowGraphTypes.Vector3 */, elementType: \"number\" },\n    float4: { length: 4, flowGraphType: \"Vector4\" /* FlowGraphTypes.Vector4 */, elementType: \"number\" },\n    float4x4: { length: 16, flowGraphType: \"Matrix\" /* FlowGraphTypes.Matrix */, elementType: \"number\" },\n    float2x2: { length: 4, flowGraphType: \"Matrix2D\" /* FlowGraphTypes.Matrix2D */, elementType: \"number\" },\n    float3x3: { length: 9, flowGraphType: \"Matrix3D\" /* FlowGraphTypes.Matrix3D */, elementType: \"number\" },\n    int: { length: 1, flowGraphType: \"FlowGraphInteger\" /* FlowGraphTypes.Integer */, elementType: \"number\" },\n};\nexport class InteractivityGraphToFlowGraphParser {\n    constructor(_interactivityGraph, _gltf, _loader) {\n        this._interactivityGraph = _interactivityGraph;\n        this._gltf = _gltf;\n        this._loader = _loader;\n        /**\n         * Note - the graph should be rejected if the same type is defined twice.\n         * We currently don't validate that.\n         */\n        this._types = [];\n        this._mappings = [];\n        this._staticVariables = [];\n        this._events = [];\n        this._internalEventsCounter = 0;\n        this._nodes = [];\n        // start with types\n        this._parseTypes();\n        // continue with declarations\n        this._parseDeclarations();\n        this._parseVariables();\n        this._parseEvents();\n        this._parseNodes();\n    }\n    get arrays() {\n        return {\n            types: this._types,\n            mappings: this._mappings,\n            staticVariables: this._staticVariables,\n            events: this._events,\n            nodes: this._nodes,\n        };\n    }\n    _parseTypes() {\n        if (!this._interactivityGraph.types) {\n            return;\n        }\n        for (const type of this._interactivityGraph.types) {\n            this._types.push(gltfTypeToBabylonType[type.signature]);\n        }\n    }\n    _parseDeclarations() {\n        if (!this._interactivityGraph.declarations) {\n            return;\n        }\n        for (const declaration of this._interactivityGraph.declarations) {\n            // make sure we have the mapping for this operation\n            const mapping = getMappingForDeclaration(declaration);\n            // mapping is defined, because we generate an empty mapping if it's not found\n            if (!mapping) {\n                Logger.Error([\"No mapping found for declaration\", declaration]);\n                throw new Error(\"Error parsing declarations\");\n            }\n            this._mappings.push({\n                flowGraphMapping: mapping,\n                fullOperationName: declaration.extension ? declaration.op + \":\" + declaration.extension : declaration.op,\n            });\n        }\n    }\n    _parseVariables() {\n        if (!this._interactivityGraph.variables) {\n            return;\n        }\n        for (const variable of this._interactivityGraph.variables) {\n            const parsed = this._parseVariable(variable);\n            // set the default values here\n            this._staticVariables.push(parsed);\n        }\n    }\n    _parseVariable(variable, dataTransform) {\n        const type = this._types[variable.type];\n        if (!type) {\n            Logger.Error([\"No type found for variable\", variable]);\n            throw new Error(\"Error parsing variables\");\n        }\n        if (variable.value) {\n            if (variable.value.length !== type.length) {\n                Logger.Error([\"Invalid value length for variable\", variable, type]);\n                throw new Error(\"Error parsing variables\");\n            }\n        }\n        const value = variable.value || [];\n        if (!value.length) {\n            switch (type.flowGraphType) {\n                case \"boolean\" /* FlowGraphTypes.Boolean */:\n                    value.push(false);\n                    break;\n                case \"FlowGraphInteger\" /* FlowGraphTypes.Integer */:\n                    value.push(0);\n                    break;\n                case \"number\" /* FlowGraphTypes.Number */:\n                    value.push(NaN);\n                    break;\n                case \"Vector2\" /* FlowGraphTypes.Vector2 */:\n                    value.push(NaN, NaN);\n                    break;\n                case \"Vector3\" /* FlowGraphTypes.Vector3 */:\n                    value.push(NaN, NaN, NaN);\n                    break;\n                case \"Vector4\" /* FlowGraphTypes.Vector4 */:\n                case \"Matrix2D\" /* FlowGraphTypes.Matrix2D */:\n                case \"Quaternion\" /* FlowGraphTypes.Quaternion */:\n                    value.fill(NaN, 0, 4);\n                    break;\n                case \"Matrix\" /* FlowGraphTypes.Matrix */:\n                    value.fill(NaN, 0, 16);\n                    break;\n                case \"Matrix3D\" /* FlowGraphTypes.Matrix3D */:\n                    value.fill(NaN, 0, 9);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return { type: type.flowGraphType, value: dataTransform ? dataTransform(value, this) : value };\n    }\n    _parseEvents() {\n        if (!this._interactivityGraph.events) {\n            return;\n        }\n        for (const event of this._interactivityGraph.events) {\n            const converted = {\n                eventId: event.id || \"internalEvent_\" + this._internalEventsCounter++,\n            };\n            if (event.values) {\n                converted.eventData = Object.keys(event.values).map((key) => {\n                    const eventValue = event.values?.[key];\n                    if (!eventValue) {\n                        Logger.Error([\"No value found for event key\", key]);\n                        throw new Error(\"Error parsing events\");\n                    }\n                    const type = this._types[eventValue.type];\n                    if (!type) {\n                        Logger.Error([\"No type found for event value\", eventValue]);\n                        throw new Error(\"Error parsing events\");\n                    }\n                    const value = typeof eventValue.value !== \"undefined\" ? this._parseVariable(eventValue) : undefined;\n                    return {\n                        id: key,\n                        type: type.flowGraphType,\n                        eventData: true,\n                        value,\n                    };\n                });\n            }\n            this._events.push(converted);\n        }\n    }\n    _parseNodes() {\n        if (!this._interactivityGraph.nodes) {\n            return;\n        }\n        for (const node of this._interactivityGraph.nodes) {\n            // some validation\n            if (typeof node.declaration !== \"number\") {\n                Logger.Error([\"No declaration found for node\", node]);\n                throw new Error(\"Error parsing nodes\");\n            }\n            const mapping = this._mappings[node.declaration];\n            if (!mapping) {\n                Logger.Error([\"No mapping found for node\", node]);\n                throw new Error(\"Error parsing nodes\");\n            }\n            if (mapping.flowGraphMapping.validation) {\n                if (!mapping.flowGraphMapping.validation(node, this._interactivityGraph, this._gltf)) {\n                    throw new Error(`Error validating interactivity node ${node}`);\n                }\n            }\n            const blocks = [];\n            // create block(s) for this node using the mapping\n            for (const blockType of mapping.flowGraphMapping.blocks) {\n                const block = this._getEmptyBlock(blockType, mapping.fullOperationName);\n                this._parseNodeConfiguration(node, block, mapping.flowGraphMapping, blockType);\n                blocks.push(block);\n            }\n            this._nodes.push({ blocks, fullOperationName: mapping.fullOperationName });\n        }\n    }\n    _getEmptyBlock(className, type) {\n        const uniqueId = RandomGUID();\n        const dataInputs = [];\n        const dataOutputs = [];\n        const signalInputs = [];\n        const signalOutputs = [];\n        const config = {};\n        const metadata = {};\n        return {\n            uniqueId,\n            className,\n            dataInputs,\n            dataOutputs,\n            signalInputs,\n            signalOutputs,\n            config,\n            type,\n            metadata,\n        };\n    }\n    _parseNodeConfiguration(node, block, nodeMapping, blockType) {\n        const configuration = block.config;\n        if (node.configuration) {\n            Object.keys(node.configuration).forEach((key) => {\n                const value = node.configuration?.[key];\n                // value is always an array, never a number or string\n                if (!value) {\n                    Logger.Error([\"No value found for node configuration\", key]);\n                    throw new Error(\"Error parsing node configuration\");\n                }\n                const configMapping = nodeMapping.configuration?.[key];\n                const belongsToBlock = configMapping && configMapping.toBlock ? configMapping.toBlock === blockType : nodeMapping.blocks.indexOf(blockType) === 0;\n                if (belongsToBlock) {\n                    // get the right name for the configuration key\n                    const configKey = configMapping?.name || key;\n                    if ((!value || typeof value.value === \"undefined\") && typeof configMapping?.defaultValue !== \"undefined\") {\n                        configuration[configKey] = {\n                            value: configMapping.defaultValue,\n                        };\n                    }\n                    else if (value.value.length >= 1) {\n                        // supporting int[] and int/boolean/string\n                        configuration[configKey] = {\n                            value: value.value.length === 1 ? value.value[0] : value.value,\n                        };\n                    }\n                    else {\n                        Logger.Warn([\"Invalid value for node configuration\", value]);\n                    }\n                    // make sure we transform the data if needed\n                    if (configMapping && configMapping.dataTransformer) {\n                        configuration[configKey].value = configMapping.dataTransformer([configuration[configKey].value], this)[0];\n                    }\n                }\n            });\n        }\n    }\n    _parseNodeConnections(context) {\n        for (let i = 0; i < this._nodes.length; i++) {\n            // get the corresponding gltf node\n            const gltfNode = this._interactivityGraph.nodes?.[i];\n            if (!gltfNode) {\n                // should never happen but let's still check\n                Logger.Error([\"No node found for interactivity node\", this._nodes[i]]);\n                throw new Error(\"Error parsing node connections\");\n            }\n            const flowGraphBlocks = this._nodes[i];\n            const outputMapper = this._mappings[gltfNode.declaration];\n            // validate\n            if (!outputMapper) {\n                Logger.Error([\"No mapping found for node\", gltfNode]);\n                throw new Error(\"Error parsing node connections\");\n            }\n            const flowsFromGLTF = gltfNode.flows || {};\n            const flowsKeys = Object.keys(flowsFromGLTF).sort(); // sorting as some operations require sorted keys\n            // connect the flows\n            for (const flowKey of flowsKeys) {\n                const flow = flowsFromGLTF[flowKey];\n                const flowMapping = outputMapper.flowGraphMapping.outputs?.flows?.[flowKey];\n                const socketOutName = flowMapping?.name || flowKey;\n                // create a serialized socket\n                const socketOut = this._createNewSocketConnection(socketOutName, true);\n                const block = (flowMapping && flowMapping.toBlock && flowGraphBlocks.blocks.find((b) => b.className === flowMapping.toBlock)) || flowGraphBlocks.blocks[0];\n                block.signalOutputs.push(socketOut);\n                // get the input node of this block\n                const inputNodeId = flow.node;\n                const nodeIn = this._nodes[inputNodeId];\n                if (!nodeIn) {\n                    Logger.Error([\"No node found for input node id\", inputNodeId]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                // get the mapper for the input node - in case it mapped to multiple blocks\n                const inputMapper = getMappingForFullOperationName(nodeIn.fullOperationName);\n                if (!inputMapper) {\n                    Logger.Error([\"No mapping found for input node\", nodeIn]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                let flowInMapping = inputMapper.inputs?.flows?.[flow.socket || \"in\"];\n                let arrayMapping = false;\n                if (!flowInMapping) {\n                    for (const key in inputMapper.inputs?.flows) {\n                        if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                            arrayMapping = true;\n                            flowInMapping = inputMapper.inputs?.flows?.[key];\n                        }\n                    }\n                }\n                const nodeInSocketName = flowInMapping ? (arrayMapping ? flowInMapping.name.replace(\"$1\", flow.socket || \"\") : flowInMapping.name) : flow.socket || \"in\";\n                const inputBlock = (flowInMapping && flowInMapping.toBlock && nodeIn.blocks.find((b) => b.className === flowInMapping.toBlock)) || nodeIn.blocks[0];\n                // in all of the flow graph input connections, find the one with the same name as the socket\n                let socketIn = inputBlock.signalInputs.find((s) => s.name === nodeInSocketName);\n                // if the socket doesn't exist, create the input socket for the connection\n                if (!socketIn) {\n                    socketIn = this._createNewSocketConnection(nodeInSocketName);\n                    inputBlock.signalInputs.push(socketIn);\n                }\n                // connect the sockets\n                socketIn.connectedPointIds.push(socketOut.uniqueId);\n                socketOut.connectedPointIds.push(socketIn.uniqueId);\n            }\n            // connect the values\n            const valuesFromGLTF = gltfNode.values || {};\n            const valuesKeys = Object.keys(valuesFromGLTF);\n            for (const valueKey of valuesKeys) {\n                const value = valuesFromGLTF[valueKey];\n                let valueMapping = outputMapper.flowGraphMapping.inputs?.values?.[valueKey];\n                let arrayMapping = false;\n                if (!valueMapping) {\n                    for (const key in outputMapper.flowGraphMapping.inputs?.values) {\n                        if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                            arrayMapping = true;\n                            valueMapping = outputMapper.flowGraphMapping.inputs?.values?.[key];\n                        }\n                    }\n                }\n                const socketInName = valueMapping ? (arrayMapping ? valueMapping.name.replace(\"$1\", valueKey) : valueMapping.name) : valueKey;\n                // create a serialized socket\n                const socketIn = this._createNewSocketConnection(socketInName);\n                const block = (valueMapping && valueMapping.toBlock && flowGraphBlocks.blocks.find((b) => b.className === valueMapping.toBlock)) || flowGraphBlocks.blocks[0];\n                block.dataInputs.push(socketIn);\n                if (value.value !== undefined) {\n                    const convertedValue = this._parseVariable(value, valueMapping && valueMapping.dataTransformer);\n                    context._connectionValues[socketIn.uniqueId] = convertedValue;\n                }\n                else if (typeof value.node !== \"undefined\") {\n                    const nodeOutId = value.node;\n                    const nodeOutSocketName = value.socket || \"value\";\n                    const nodeOut = this._nodes[nodeOutId];\n                    if (!nodeOut) {\n                        Logger.Error([\"No node found for output socket reference\", value]);\n                        throw new Error(\"Error parsing node connections\");\n                    }\n                    const outputMapper = getMappingForFullOperationName(nodeOut.fullOperationName);\n                    if (!outputMapper) {\n                        Logger.Error([\"No mapping found for output socket reference\", value]);\n                        throw new Error(\"Error parsing node connections\");\n                    }\n                    let valueMapping = outputMapper.outputs?.values?.[nodeOutSocketName];\n                    let arrayMapping = false;\n                    // check if there is an array mapping defined\n                    if (!valueMapping) {\n                        // search for a value mapping that has an array mapping\n                        for (const key in outputMapper.outputs?.values) {\n                            if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                                arrayMapping = true;\n                                valueMapping = outputMapper.outputs?.values?.[key];\n                            }\n                        }\n                    }\n                    const socketOutName = valueMapping ? (arrayMapping ? valueMapping.name.replace(\"$1\", nodeOutSocketName) : valueMapping?.name) : nodeOutSocketName;\n                    const outBlock = (valueMapping && valueMapping.toBlock && nodeOut.blocks.find((b) => b.className === valueMapping.toBlock)) || nodeOut.blocks[0];\n                    let socketOut = outBlock.dataOutputs.find((s) => s.name === socketOutName);\n                    // if the socket doesn't exist, create it\n                    if (!socketOut) {\n                        socketOut = this._createNewSocketConnection(socketOutName, true);\n                        outBlock.dataOutputs.push(socketOut);\n                    }\n                    // connect the sockets\n                    socketIn.connectedPointIds.push(socketOut.uniqueId);\n                    socketOut.connectedPointIds.push(socketIn.uniqueId);\n                }\n                else {\n                    Logger.Error([\"Invalid value for value connection\", value]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n            }\n            // inter block connections\n            if (outputMapper.flowGraphMapping.interBlockConnectors) {\n                for (const connector of outputMapper.flowGraphMapping.interBlockConnectors) {\n                    const input = connector.input;\n                    const output = connector.output;\n                    const isVariable = connector.isVariable;\n                    this._connectFlowGraphNodes(input, output, flowGraphBlocks.blocks[connector.inputBlockIndex], flowGraphBlocks.blocks[connector.outputBlockIndex], isVariable);\n                }\n            }\n            if (outputMapper.flowGraphMapping.extraProcessor) {\n                const declaration = this._interactivityGraph.declarations?.[gltfNode.declaration];\n                if (!declaration) {\n                    Logger.Error([\"No declaration found for extra processor\", gltfNode]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                flowGraphBlocks.blocks = outputMapper.flowGraphMapping.extraProcessor(gltfNode, declaration, outputMapper.flowGraphMapping, this, flowGraphBlocks.blocks, context, this._gltf);\n            }\n        }\n    }\n    _createNewSocketConnection(name, isOutput) {\n        return {\n            uniqueId: RandomGUID(),\n            name,\n            _connectionType: isOutput ? 1 /* FlowGraphConnectionType.Output */ : 0 /* FlowGraphConnectionType.Input */,\n            connectedPointIds: [],\n        };\n    }\n    _connectFlowGraphNodes(input, output, serializedInput, serializedOutput, isVariable) {\n        const inputArray = isVariable ? serializedInput.dataInputs : serializedInput.signalInputs;\n        const outputArray = isVariable ? serializedOutput.dataOutputs : serializedOutput.signalOutputs;\n        const inputConnection = inputArray.find((s) => s.name === input) || this._createNewSocketConnection(input);\n        const outputConnection = outputArray.find((s) => s.name === output) || this._createNewSocketConnection(output, true);\n        // of not found add it to the array\n        if (!inputArray.find((s) => s.name === input)) {\n            inputArray.push(inputConnection);\n        }\n        if (!outputArray.find((s) => s.name === output)) {\n            outputArray.push(outputConnection);\n        }\n        // connect the sockets\n        inputConnection.connectedPointIds.push(outputConnection.uniqueId);\n        outputConnection.connectedPointIds.push(inputConnection.uniqueId);\n    }\n    getVariableName(index) {\n        return \"staticVariable_\" + index;\n    }\n    serializeToFlowGraph() {\n        const context = {\n            uniqueId: RandomGUID(),\n            _userVariables: {},\n            _connectionValues: {},\n        };\n        this._parseNodeConnections(context);\n        for (let i = 0; i < this._staticVariables.length; i++) {\n            const variable = this._staticVariables[i];\n            context._userVariables[this.getVariableName(i)] = variable;\n        }\n        const allBlocks = this._nodes.reduce((acc, val) => acc.concat(val.blocks), []);\n        return {\n            rightHanded: true,\n            allBlocks,\n            executionContexts: [context],\n        };\n    }\n}\n//# sourceMappingURL=interactivityGraphParser.js.map","import { FlowGraphCoordinator } from \"@babylonjs/core/FlowGraph/flowGraphCoordinator.js\";\nimport { ParseFlowGraphAsync } from \"@babylonjs/core/FlowGraph/flowGraphParser.js\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry.js\";\nimport { AddObjectAccessorToKey, GetPathToObjectConverter } from \"./objectModelMapping.js\";\nimport { InteractivityGraphToFlowGraphParser } from \"./KHR_interactivity/interactivityGraphParser.js\";\nimport { addToBlockFactory } from \"@babylonjs/core/FlowGraph/Blocks/flowGraphBlockFactory.js\";\nimport { Quaternion, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nconst NAME = \"KHR_interactivity\";\n/**\n * Loader extension for KHR_interactivity\n */\nexport class KHR_interactivity {\n    /**\n     * @internal\n     * @param _loader\n     */\n    constructor(_loader) {\n        this._loader = _loader;\n        /**\n         * The name of this extension.\n         */\n        this.name = NAME;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n        this._pathConverter = GetPathToObjectConverter(this._loader.gltf);\n        // avoid starting animations automatically.\n        _loader._skipStartAnimationStep = true;\n        // Update object model with new pointers\n        const scene = _loader.babylonScene;\n        if (scene) {\n            _AddInteractivityObjectModel(scene);\n        }\n    }\n    dispose() {\n        this._loader = null;\n        delete this._pathConverter;\n    }\n    async onReady() {\n        if (!this._loader.babylonScene || !this._pathConverter) {\n            return;\n        }\n        const scene = this._loader.babylonScene;\n        const interactivityDefinition = this._loader.gltf.extensions?.KHR_interactivity;\n        if (!interactivityDefinition) {\n            // This can technically throw, but it's not a critical error\n            return;\n        }\n        const coordinator = new FlowGraphCoordinator({ scene });\n        coordinator.dispatchEventsSynchronously = false; // glTF interactivity dispatches events asynchronously\n        const graphs = interactivityDefinition.graphs.map((graph) => {\n            const parser = new InteractivityGraphToFlowGraphParser(graph, this._loader.gltf, this._loader);\n            return parser.serializeToFlowGraph();\n        });\n        // parse each graph async\n        await Promise.all(graphs.map((graph) => ParseFlowGraphAsync(graph, { coordinator, pathConverter: this._pathConverter })));\n        coordinator.start();\n    }\n}\n/**\n * @internal\n * populates the object model with the interactivity extension\n */\nexport function _AddInteractivityObjectModel(scene) {\n    // Note - all of those are read-only, as per the specs!\n    // active camera rotation\n    AddObjectAccessorToKey(\"/extensions/KHR_interactivity/?/activeCamera/rotation\", {\n        get: () => {\n            if (!scene.activeCamera) {\n                return new Quaternion(NaN, NaN, NaN, NaN);\n            }\n            return Quaternion.FromRotationMatrix(scene.activeCamera.getWorldMatrix()).normalize();\n        },\n        type: \"Quaternion\",\n        getTarget: () => scene.activeCamera,\n    });\n    // activeCamera position\n    AddObjectAccessorToKey(\"/extensions/KHR_interactivity/?/activeCamera/position\", {\n        get: () => {\n            if (!scene.activeCamera) {\n                return new Vector3(NaN, NaN, NaN);\n            }\n            return scene.activeCamera.position; // not global position\n        },\n        type: \"Vector3\",\n        getTarget: () => scene.activeCamera,\n    });\n    // /animations/{} pointers:\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/isPlaying\", {\n        get: (animation) => {\n            return animation._babylonAnimationGroup?.isPlaying ?? false;\n        },\n        type: \"boolean\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/minTime\", {\n        get: (animation) => {\n            return (animation._babylonAnimationGroup?.from ?? 0) / 60; // fixed factor for duration-to-frames conversion\n        },\n        type: \"number\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/maxTime\", {\n        get: (animation) => {\n            return (animation._babylonAnimationGroup?.to ?? 0) / 60; // fixed factor for duration-to-frames conversion\n        },\n        type: \"number\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n    // playhead\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/playhead\", {\n        get: (animation) => {\n            return (animation._babylonAnimationGroup?.getCurrentFrame() ?? 0) / 60; // fixed factor for duration-to-frames conversion\n        },\n        type: \"number\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n    //virtualPlayhead - TODO, do we support this property in our animations? getCurrentFrame  is the only method we have for this.\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/virtualPlayhead\", {\n        get: (animation) => {\n            return (animation._babylonAnimationGroup?.getCurrentFrame() ?? 0) / 60; // fixed factor for duration-to-frames conversion\n        },\n        type: \"number\",\n        getTarget: (animation) => {\n            return animation._babylonAnimationGroup;\n        },\n    });\n}\n// Register flow graph blocks. Do it here so they are available when the extension is enabled.\naddToBlockFactory(NAME, \"FlowGraphGLTFDataProvider\", async () => {\n    return (await import(\"./KHR_interactivity/flowGraphGLTFDataProvider.js\")).FlowGraphGLTFDataProvider;\n});\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_interactivity(loader));\n//# sourceMappingURL=KHR_interactivity.js.map"],"file":"assets/KHR_interactivity-SX6q0HxG.js"}